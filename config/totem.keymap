// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include "zmk-helpers/helper.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH2 LH1 LH0 RH0 RH1 RH2

// Home row mods macro
// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

#define HM_TAPPING_TERM 280
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 100

&lt {
    flavor = "balanced";
    tapping-term-ms = <HM_TAPPING_TERM>;
    hold-trigger-on-release;
};

/ {
    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 12>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp D             &kp R                &kp W         &kp B        &kp J        &kp F         &kp U                &kp P              &kp SEMICOLON
&hm_l LCMD A  &hm_l LEFT_ALT S  &hm_shift_l LSHFT H  &hm_l LCTRL T  &kp G        &kp Y        &hm_r RCTRL N  &hm_shift_r RSHFT E  &hm_r RIGHT_ALT O  &hm_r RGUI I
&none &kp Z         &kp X             &kp M                &kp C         &kp V        &kp K        &kp L         &kp COMMA            &kp DOT            &kp FSLH &none
                                                     &none &lt 4 ESCAPE  &lt 2 TAB    &lt 2 SPACE  &mo 1 &none
            >;
        };

        right_layer {
            bindings = <
&kp EXCLAMATION       &kp AT             &kp EQUAL  &kp DOLLAR      &kp PERCENT              &none   &kp N7                &kp N8        &kp N9        &none
&kp LEFT_PARENTHESIS  &kp ASTERISK       &kp CARET  &kp AMPERSAND   &kp RIGHT_PARENTHESIS    &none   &hm_r RCTRL NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0
&none &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp HASH   &kp LEFT_BRACE  &kp RIGHT_BRACE          &trans  &kp NUMBER_1          &kp NUMBER_2  &kp NUMBER_3  &kp PLUS &none
                                                    &none &mo 3           &kp BACKSPACE            &none   &none &none
            >;
        };

        left_layer {
            bindings = <
&kp PIPE              &kp TILDE         &kp GRAVE      &kp BACKSLASH      &none                    &kp UNDERSCORE  &kp MINUS      &kp SQT      &kp DOUBLE_QUOTES  &kp INSERT
&kp LS(LC(LA(LEFT)))  &kp LA(LC(LEFT))  &none          &kp LA(LC(RIGHT))  &kp LA(LS(LC(RIGHT)))    &kp LEFT        &kp DOWN       &kp UP       &kp RIGHT          &kp PRINTSCREEN
&none &kp LS(LC(PG_UP))     &kp LC(PAGE_UP)   &kp LS(LC(T))  &kp LC(PAGE_DOWN)  &kp LC(LS(PAGE_DOWN))    &kp DEL         &kp PAGE_DOWN  &kp PAGE_UP  &kp HOME           &kp END &none
                                                       &none &none              &none                    &kp ENTER       &none &none
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &soft_off  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans    &trans     &kp F4  &kp F5  &kp F6  &kp F11
&trans &trans  &trans  &trans  &trans  &trans    &trans     &kp F1  &kp F2  &kp F3  &kp F12 &trans
                        &trans &trans  &trans    &trans     &trans &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans    &kp H   &kp J   &kp K   &kp L   &trans
&trans &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans &trans
                        &trans &trans  &trans    &trans  &trans &trans
            >;
        };
    };
};
